Nov-21 notes (automatic comments and subscriptions)
---------------------------------------------------
* Every action creates a comment on the item the action was about (but not for create)
* If you add something to an itemset, the comment is located at that particular "item" but the comment is still on the itemset
* We have UserComments and AutoGeneratedComments (and subclasses)
* You subscribe to an item: means you get emails for every comment on it, you can choose whether your subscription is comprehensive (recursive)
* ItemSetMembership has a "is_recursive" flag to show that itemset in itemset stores recursive items, create a table (not as an item) to store recursive parents and children
* Customizable email per site that gets sent out for each comment

Symsys module
-------------
* permissions for symsysusers will just be interpreted in the viewer, they don't get "modify_permissions"

Ontology changes
----------------
* Add Location class and LocationContains relationship
* Event has multiple locations and times
* Add Excerpt item_type
  - Item_Id
  - ItemVersion
  - FieldItIsAbout (maybe just the body)
  - xpath_string (multiple regions)
  - data

Code correctness/consistency/bugs
---------------------------------
* remember to fully respect trashed=1 everywhere, like in groups, comments, etc.
* make constraints (validations?) other than uniqueness work in models with revisions (are there any issues?)
* figure out import deal on deme_django.cms and just cms
* start using verbose_name to have nice displays of item type names
* fyi, there may be cases where there is cur_agent but no cur_account (like anonymous, and login_as other)
* having the default "Item" and "id" ability_parameter is kind of unelegant.
* make "create folio" after group create be a after_save filter sort of thing, rather than viewer implemented, so subclasses of viewer do okay
* urls should be more modular, not hard coded as much, like all the /static/media and /resource/{{item_type}}
* decide whether to have autoescape on or off
* add sensitive_function.alters_data = True to functions like save_versioned so templates cant call them
* lots of html escaping to do probably (or probably turn autoescape on)

Performance
-----------
* Speed up itemset view by doing filter permissions rather than per-item
* add indexes on things besides foreign keys, like name,description (for search) or version_number, and in global permissions: ability, ability_parameter, and is_allowed fields
* we need multi-column indexes for permissions

Features
--------
* edit locks
* deleting items (i.e. blanking)
* write a query that finds out all of the people that have permission to do X to item Y

Interface
---------
* we need a global permission editor like the local permission editor

Distant Future
--------------
* more efficient versioning (like like latest version in db, but have deltas to prev versions)
* later, think about adding back "edit downcast". we'll have to think about
  - what happens when viewer2 inherits from viewer1, and viewer2 item type subclasses viewer1 item type, and viewer2 inherits the edit/update functionality?
  - make it work better when you downcast an item in the editor, with versioning backward, and calling actions that should be called on create
* respect the format string and have XML output and stuff
* work on google app engine
* We're going to have to integrate permissions into binary files (e.g., MediaDocument) so that users can't bypass Deme and download things from Apache directly.
  - I'd like to have a settings option where you either have apache with no permissions, django with no permissions, or django with full permissions (or maybe later a workaround with apache and permissions based on cookie)

Small Details
-------------
* make favicon transparent (both symsys and groupspace)
* SSL for login or just sha1 the password in javascript
* don't forget to update crystal icons for new models
* make sure actions that change state go through POST and not GET, like entry_trash
