|==========|
|Short Term|
|==========|

* Change the path to incoming_email.py on deme.stanford.edu

Jan-8 notes
-----------
* announce list == manually created subscriptions with special permissions, such that you cannot unsubscribe, and announcements are just comments on the group
* make nice web layout for deme in general
* yes, change permissions to be one row

Nov-21 notes (automatic comments and subscriptions)
---------------------------------------------------
* Customizable email template per site that gets sent out for each comment (notification)

Symsys module
-------------
* permissions for symsysusers will just be interpreted in the viewer, they don't get "modify_permissions"
* joining and leaving groups is somehow covered by permissions
* examine the choices for academic_title and admin_title
* advisor should point to a symsysaffiliate
* change honors_advisor and honors_second_reader to symsysaffiliate pointers (problem is some aren't symsys affiliates)
* come up with specification for new symsys layout
* Make granular permissions on AddressContactMethods
* Figure out how to port mailing lists over

Ontology changes
----------------

Code correctness/consistency/bugs
---------------------------------
* Discuss with Todd whether we should make most text fields rich text, or just htmldocument.body
* consider making permissions have one column per ability. now that we store all possible abilities, it's easier to migrate.
* Make more sensible permissions:
  - no permissions on Roles and RoleAbilities, there should be a Role modifying interface that requires do_everything
  - figure out SiteDomains
  - Don't put creator_roles on things that just require do_everything
  - Figure out better scheme for default created roles
* figure out import deal on deme_django.cms and just cms
* start using verbose_name to have nice displays of item type names
* The "crumbs" at the top of pages like TextAdvertisements and TextComments are wrong, since they have multiple inheritance
* Either rewrite save_versioned so that we don't have nested transactions (when after_create and permissions call save_versioned again) or wait for this bug to be fixed
  - http://code.djangoproject.com/ticket/2227
* Maybe EditComment could specify the old_version and new_version (although it's not easy to determine old_version in all cases)
* Idea for conflicting id attributes with embedded documents: each id has a prefix representing the current item (or a combination of the viewer/action/noun)

Performance
-----------
* add indexes on things besides foreign keys, like name, description (for search)
  - Maybe Postgres has some nice full-text indexing for good searching
* we need multi-column indexes for permissions (so far it doesn't look like it's helping)
  - we'll try http://docs.djangoproject.com/en/dev/howto/initial-data/#howto-initial-data
* Asynchronous notifications
* See if permissions speed up with more postgres memory (so far it doesn't look like it's helping)
* It would save space if we could have blank names, and somehow the viewer would always display 'Untitled' by default

Features
--------
* edit locks
* deleting items (i.e. blanking)

Interface
---------
* There should be a full interface for specifying CommentLocations
* Interface to add ContactMethods, Subscriptions, and AuthenticationMethods to Agents

Documentation
-------------
* Update the architecture doc
* Document more functions with docstrings more
* Make some sort of API doc

Small Details
-------------

Unusual things to remember
--------------------------
* In order to know that X is a member of Y, you only need to have permission to "view item" for the Membership
* The Meta class of a model does not get propagated to the ItemVersion
* remember to fully respect trashed=1 everywhere, like in groups, comments, etc.
* There are cases when there is a cur_agent but no associated account (anonymous, login_as other)
* Some code (especially recursive comments and memberships) assumes that immutable fields actually cannot change
  - This also assumes that `trashed` can only change in trash() and untrash(), and items are always created untrashed
* Don't forget to update crystal icons for new models
* If someone has permission to edit the body of an item, we allow them to add transclusions in some situations (TextDocumentViewer.edit)
* We do not [knowingly] support OneToOneFields and ManyToManyFields in item types



|=========|
|Long Term|
|=========|


Distant Future (sorted by approximate order of planned implementation)
----------------------------------------------------------------------
* Add Shortcut (maybe call it Reference) item type, with one subclass like ItemShortcut that just points to another item, and others like URLShortcut that point to webpages
* new subclass of Agent called GroupAgent with field called group it belongs to, which is unique so that no two GroupAgents can belong to the same group
* Add exceptions to subscriptions, so you can deeply subscribe to an itemset or item, but cut off certain parts you want to ignore
* migrations (let's use http://south.aeracode.org/)
* more efficient versioning (like like latest version in db, but have deltas to prev versions)
* We're going to have to integrate permissions into binary files (e.g., MediaDocument) so that users can't bypass Deme and download things from Apache directly.
  - I'd like to have a settings option where you either have apache with no permissions, django with no permissions, or django with full permissions (or maybe later a workaround with apache and permissions based on cookie)
* respect the format string and have XML output and stuff
* When matching SiteDomain in alias, match iteratively until all subdomains are gone, so if we have deme.com, then www.deme.com matches unless already taken
* Add to ImageDocument metadata like width, height, exif, and a pointer to a thumbfile or 2
* In CustomUrl, we should prevent top level names like 'static' and 'resource' and 'modules' and 'meta', although not a big deal since it doesn't overwrite
* later, think about adding back "edit downcast". we'll have to think about
  - what happens when viewer2 inherits from viewer1, and viewer2 item type subclasses viewer1 item type, and viewer2 inherits the edit/update functionality?
  - make it work better when you downcast an item in the editor, with versioning backward, and calling actions that should be called on create
* work on google app engine
