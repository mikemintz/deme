|==========|
|Short Term|
|==========|


Symsys module
-------------
* come up with specification for new symsys layout
* Figure out how to port mailing lists over
  - announce list == manually created subscriptions with special permissions, such that you cannot unsubscribe, and announcements are just comments on the group

Ontology changes
----------------

Code correctness/consistency/bugs
---------------------------------
* the destroy action notice will never be read by anyone (since all permissions are effectively denied)
* When you edit an item, the fields are ordered funnily. How did they get ordered so correctly when you create? Obviously, the difference is that we pass in `fields` to the modelform, but how can we give them a better order?
* When you copy an item, you can discover the permissions of the original item. Not cool.
* If you try to add a Membership that used to exist but is now trashed, it fails. The code used to handle this. Probably same with CustomUrls.
* If you login/logout after you're at a page with POST or at a login page, the "back to page" is weird.
* Put the form/link code for each authentication method in its own module, and the default layout will somehow combine them
* Methods that have to do with sending emails (about action notices) should go in EmailContactMethod, not ActionNotice
* Move AuthenticationMethod stuff to their own viewers (and own modules at some point)
* Fix the multiple inheritance bug
  - http://code.djangoproject.com/ticket/10808
* The viewer should probably define a list of actions for each item type to be displayed in a menu
* Probably don't need auto-load modules: INSTALLED_APPS is more explicit and familiar
* Figure out correct way to manage assets (maybe like in rails)
* figure out how we are determining the permission to view comment hierarchy (i.e., comment.commented_item)
* Code cleanup: views, templatetags, and templates, and symsys everything
* Either rewrite save_versioned so that we don't have nested transactions (when after_create and permissions call save_versioned again) or wait for this bug to be fixed
  - http://code.djangoproject.com/ticket/2227
* Idea for conflicting HTML id attributes with embedded documents: each id has a prefix representing the current item (or a combination of the viewer/action/noun)
* HTML special chars are being escaped twice in RSS feeds
  - http://code.djangoproject.com/ticket/6533
* Do a more thorough job ensuring fields are not null (unless allowed_to_be_null_before_destroyed == True). We might have to wait for real model-based validations (Django 1.2).

Features
--------
* Advanced search

Layout
------

Interface
---------
* Make notifications have different messages for each RelationActionNotice (at least for many-to-many things like Membership and Transclusion)
* Make the action at top-right of item more of a javascript menu, like in gmail
* There should be a full interface for specifying CommentLocations
* Some sort of arrows in the side-by-side comment interface, or just click->highlight/scroll (just for TextDocuments right now)
* Include hCard in user profiles
* Include iCal export of calendar
* Nicer autocompleter (jquery plugin?)

* Make things more user friendly, i.e. making the accordion more easily understandable.

Documentation
-------------
* Document more functions with docstrings more
* Make some sort of API doc

Small Details
-------------

Unusual things to remember
--------------------------
* In order to know that X is a member of Y, you only need to have permission to "view item" for the Membership
* The Meta class of a model does not get propagated to the ItemVersion
* remember to fully respect active=0 everywhere, like in groups, comments, etc.
* There are cases when there is a cur_agent but no associated account (anonymous, login_as other)
* Some code (especially recursive comments and memberships) assumes that immutable fields actually cannot change
  - This also assumes that `active` can only change in deactivate() and reactivate(), and items are always created active
* Don't forget to update crystal icons for new models
* If someone has permission to edit the body of an item, we allow them to add transclusions in some situations (TextDocumentViewer.edit)
* We do not [knowingly] support OneToOneFields and ManyToManyFields in item types



|=========|
|Long Term|
|=========|


Distant Future (sorted by approximate order of planned implementation)
----------------------------------------------------------------------
* Migrations (let's use http://south.aeracode.org/)
* Write PermissionCache.filter_agents_by_permission so we can display which agents have a particular ability w.r.t. an item.
* Comments that are generated from the website, when sent by email, should come from an EmailContactMethod if the user has a default contact method (we'll need a way to select a default contact method)
* Specific-version destroying
* Edit locks (merging, or even synchro editing)
* Implement some sort of SiteAlias so a Site can have more than one hostname
* Internationalize using ugettext_lazy
* Add Shortcut (maybe call it Reference) item type, with one subclass like ItemShortcut that just points to another item, and others like URLShortcut that point to webpages
* Customizable email template per site that gets sent out for each notification
* When HtmlDocuments are uploaded, the server should do checks to make sure there is nothing malicious.
* Facebook API
* Installation-to-installation API
  - Allow, as an option, an alias to refer to the hostname of the installation, such as i-numbers (to allow a consistent identifier when people change hostnames for their installation).
* Think about PermissionActionNotices (where you need permission to view_permissions).
* Add options to subscriptions, like which kinds of action notices you want and whether you want to subscribe to the entire comment thread.
* Add other types of subscriptions, like text messages / IMs
* Add exceptions to subscriptions, so you can deeply subscribe to an itemset or item, but cut off certain parts you want to ignore
* Captchas
* Way to subscribe to "all items", such that the subscription will include newly created items.
* We will eventually want to have a item_type table
* More efficient versioning (like like latest version in db, but have deltas to prev versions)
  - Consider not necessarily having linear deltas. If we start with version 1, a spammer comes in and messes it up for version 2, and I "edit" version 1 so that it becomes version 3, the delta would be more efficient if it knew I started with version 1 in order to get to version 3.
* We're going to have to integrate permissions into binary files (e.g., MediaDocument) so that users can't bypass Deme and download things from Apache directly.
  - I'd like to have a settings option where you either have apache with no permissions, django with no permissions, or django with full permissions (or maybe later a workaround with apache and permissions based on cookie)
* More dynamic way of setting whether certain fields can be blank (or other constraints) within an installation.
* Have XML output and stuff
* Maybe events can have multi-field dates, like you can specify the year and month but not the day and time.
* When matching SiteDomain in alias, match iteratively until all subdomains are gone, so if we have deme.com, then www.deme.com matches unless already taken
* Add to ImageDocument metadata like width, height, exif, and a pointer to a thumbfile or 2
* Temporal history viewer that lets you look at the state of the world at a given time (e.g., the roster of a group 1 year ago)
* In CustomUrl, we should prevent top level names like 'static' and 'item' and 'modules', although not a big deal since it doesn't overwrite
* later, think about adding back "edit downcast". we'll have to think about
  - what happens when viewer2 inherits from viewer1, and viewer2 item type subclasses viewer1 item type, and viewer2 inherits the edit/update functionality?
  - make it work better when you downcast an item in the editor, with versioning backward, and calling actions that should be called on create
* work on google app engine

Performance
-----------
* add indexes on things besides foreign keys, like name, description (for search)
  - Maybe Postgres has some nice full-text indexing for good searching
* we need multi-column indexes for permissions (so far it doesn't look like it's helping)
  - we'll try http://docs.djangoproject.com/en/dev/howto/initial-data/#howto-initial-data
* See if permissions speed up with more postgres memory (so far it doesn't look like it's helping)
* Use spaceless tag to compress whitespace
  - Be careful, since it will screw with body_str in TextDocumentViewer.show
* When admin (id=1) adds an item, no need to by default include the permission that he gets do_anything

